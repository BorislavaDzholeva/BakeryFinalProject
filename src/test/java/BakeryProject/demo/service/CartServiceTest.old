package BakeryProject.demo.service;

import BakeryProject.demo.models.entity.Cart;
import BakeryProject.demo.models.entity.CartItem;
import BakeryProject.demo.models.entity.Product;
import BakeryProject.demo.models.entity.UserEntity;
import BakeryProject.demo.models.enums.AvailabilityEnum;
import BakeryProject.demo.models.enums.RoleEnum;
import BakeryProject.demo.models.view.CartItemView;
import BakeryProject.demo.repository.CartItemRepository;
import BakeryProject.demo.repository.CartRepository;
import BakeryProject.demo.repository.ProductRepository;
import BakeryProject.demo.repository.UserRepository;
import BakeryProject.demo.service.impl.CartServiceImpl;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class CartServiceTest {
    @Mock
    private CartRepository mockCartRepository;
    @Mock
    private CartItemRepository mockCartItemRepository;
    @Mock
    private UserRepository mockUserRepository;
    @Mock
    private ProductRepository mockProductRepository;
    @Captor
    private ArgumentCaptor<Cart> cartArgumentCaptor;
    private CartServiceImpl serviceToTest;
    private Cart testCart;
    private Product testProduct;
    private UserEntity testUser;
    private CartItem testCartItem;

    @BeforeEach
    void setUp() {
        serviceToTest = new CartServiceImpl(mockCartRepository, mockUserRepository, mockProductRepository, mockCartItemRepository);
        testUser = new UserEntity() {
            {
                setId(1L);
                setFirstName("firstName");
                setLastName("lastName");
                setUsername("username");
                setPassword("password");
                setEmail("email");
                setRole(RoleEnum.User);
                setCart(testCart);
            }
        };

        List<CartItem> cartItemsList = new ArrayList<>();
        cartItemsList.add(testCartItem);
        testCart = new Cart() {
            {
                setId(1L);
                setCartItems(cartItemsList);
                setOwner(testUser);

            }
        };
        testProduct = new Product() {
            {
                setId(1L);
                setName("name");
                setPrice(BigDecimal.valueOf(1.0));
                setWeight(1);
                setCategory(null);
                setProductImage("url");
                setDescription("description");
                setAllergens("allergens");
                setIngredients("ingredients");
                setAvailability(AvailabilityEnum.Always);

            }
        };
        testCartItem = new CartItem() {
            {
                setId(1L);
                setProduct(testProduct);
                setQuantity(1);
            }
        };
    }

    @Test
    void testBuyProductById() {
        // Arrange
        Long productId = 1L;
        String currentUser = "username";

        UserEntity user = new UserEntity();
        user.setCart(new Cart());

        Product product = new Product();
        product.setId(productId);

        when(mockUserRepository.findByUsername(currentUser)).thenReturn(Optional.of(user));
        when(mockProductRepository.findById(productId)).thenReturn(Optional.of(product));

        // Act
        serviceToTest.buyProductById(productId, currentUser);

        // Assert
        ArgumentCaptor<Cart> cartCaptor = ArgumentCaptor.forClass(Cart.class);
        Mockito.verify(mockCartRepository, Mockito.times(1)).save(cartCaptor.capture());

        Cart savedCart = cartCaptor.getValue();
        Assertions.assertEquals(user, savedCart.getOwner());
        Assertions.assertEquals(1, savedCart.getCartItems().size());

        CartItem cartItem = savedCart.getCartItems().get(0);
        Assertions.assertEquals(product, cartItem.getProduct());
        Assertions.assertEquals(1, cartItem.getQuantity());
    }

    @Test
    void testBuyProductById_ExistingCartItem() {
        // Arrange
        Long productId = 1L;
        String currentUser = "username";

        UserEntity user = new UserEntity();
        Cart cart = new Cart();
        user.setCart(cart);

        Product product = new Product();
        product.setId(productId);

        CartItem cartItem = new CartItem();
        cartItem.setProduct(product);
        cartItem.setQuantity(1);
        cart.getCartItems().add(cartItem);

        when(mockUserRepository.findByUsername(currentUser)).thenReturn(Optional.of(user));
        when(mockProductRepository.findById(productId)).thenReturn(Optional.of(product));

        // Act
        serviceToTest.buyProductById(productId, currentUser);

        // Assert
        ArgumentCaptor<Cart> cartCaptor = ArgumentCaptor.forClass(Cart.class);
        Mockito.verify(mockCartRepository, Mockito.times(2)).save(cartCaptor.capture());

        Cart savedCart = cartCaptor.getValue();
        Assertions.assertEquals(user, savedCart.getOwner());
        Assertions.assertEquals(1, savedCart.getCartItems().size());

        CartItem updatedCartItem = savedCart.getCartItems().get(0);
        Assertions.assertEquals(product, updatedCartItem.getProduct());
        Assertions.assertEquals(2, updatedCartItem.getQuantity());
    }


//    @Test
//    void testBuyProductById() {
//        when(mockUserRepository.findByUsername("username")).thenReturn(Optional.of(testUser));
//        when(mockProductRepository.findById(testProduct.getId())).thenReturn(Optional.of(testProduct));
//        when(mockCartRepository.save(cartArgumentCaptor.capture())).thenReturn(testCart);
//        serviceToTest.buyProductById(testProduct.getId(), "username");
//        Assertions.assertEquals(1, testCart.getCartItems().size());
//        Assertions.assertEquals( 2, testCart.getCartItems().get(0).getQuantity());
//
//
//    }
}
